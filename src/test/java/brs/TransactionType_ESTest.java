/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 21 20:33:19 GMT 2017
 */

package brs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import brs.TransactionType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.json.simple.JSONObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransactionType_ESTest extends TransactionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TransactionType.Messaging transactionType_Messaging0 = TransactionType.Messaging.ACCOUNT_INFO;
      byte byte0 = transactionType_Messaging0.getType();
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TransactionType transactionType0 = TransactionType.DigitalGoods.DELIVERY;
      long long0 = transactionType0.minimumFeeNQT(0, 2109);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TransactionType.Messaging transactionType_Messaging0 = TransactionType.Messaging.ACCOUNT_INFO;
      // Undeclared exception!
      try { 
        transactionType_Messaging0.POLL_CREATION.parseAttachment((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.Appendix$AbstractAppendix", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TransactionType transactionType0 = TransactionType.ColoredCoins.ASSET_ISSUANCE;
      TransactionType.Fee transactionType_Fee0 = transactionType0.getNextFee();
      long long0 = transactionType_Fee0.getAppendagesFee();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TransactionType.Fee transactionType_Fee0 = new TransactionType.Fee(7L, 7L);
      assertEquals(7L, transactionType_Fee0.getAppendagesFee());
      assertEquals(7L, transactionType_Fee0.getConstantFee());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TransactionType.Messaging transactionType_Messaging0 = TransactionType.Messaging.ACCOUNT_INFO;
      long long0 = transactionType_Messaging0.POLL_CREATION.minimumFeeNQT(25165824, 1176);
      assertEquals(100000000L, long0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TransactionType transactionType0 = TransactionType.DigitalGoods.PURCHASE;
      boolean boolean0 = transactionType0.isSigned();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TransactionType transactionType0 = TransactionType.DigitalGoods.PURCHASE;
      TransactionType.Fee transactionType_Fee0 = transactionType0.getNextFee();
      assertEquals(0L, transactionType_Fee0.getAppendagesFee());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TransactionType.Messaging transactionType_Messaging0 = TransactionType.Messaging.ACCOUNT_INFO;
      String string0 = transactionType_Messaging0.toString();
      assertEquals("type: 1, subtype: 5", string0);
  }
}
