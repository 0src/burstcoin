/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 21 20:53:39 GMT 2017
 */

package brs.crypto.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import brs.crypto.hash.Digest;
import brs.crypto.hash.RIPEMD160;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RIPEMD160_ESTest extends RIPEMD160_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      byte[] byteArray0 = rIPEMD160_0.getBlockBuffer();
      rIPEMD160_0.processBlock(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      byte[] byteArray0 = rIPEMD160_0.digest();
      rIPEMD160_0.doPadding(byteArray0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      rIPEMD160_0.engineReset();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      rIPEMD160_0.doInit();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      // Undeclared exception!
      try { 
        rIPEMD160_0.processBlock((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.crypto.hash.RIPEMD160", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      byte[] byteArray0 = rIPEMD160_0.digest();
      // Undeclared exception!
      try { 
        rIPEMD160_0.processBlock(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("brs.crypto.hash.RIPEMD160", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      // Undeclared exception!
      try { 
        rIPEMD160_0.doPadding((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.crypto.hash.RIPEMD160", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      int int0 = rIPEMD160_0.getBlockLength();
      assertEquals(20, rIPEMD160_0.getDigestLength());
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      int int0 = rIPEMD160_0.getDigestLength();
      assertEquals(20, int0);
      assertEquals(64, rIPEMD160_0.getBlockLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      Digest digest0 = rIPEMD160_0.copy();
      assertEquals(20, digest0.getDigestLength());
      assertEquals(64, digest0.getBlockLength());
      assertNotSame(digest0, rIPEMD160_0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      String string0 = rIPEMD160_0.toString();
      assertEquals(20, rIPEMD160_0.getDigestLength());
      assertEquals("RIPEMD-160", string0);
      assertEquals(64, rIPEMD160_0.getBlockLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RIPEMD160 rIPEMD160_0 = new RIPEMD160();
      byte[] byteArray0 = rIPEMD160_0.digest();
      // Undeclared exception!
      try { 
        rIPEMD160_0.doPadding(byteArray0, (-2067236844));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2067236844
         //
         verifyException("brs.crypto.hash.RIPEMD160", e);
      }
  }
}
