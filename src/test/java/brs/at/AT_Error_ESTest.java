/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 21 21:34:29 GMT 2017
 */

package brs.at;

import org.junit.Test;
import static org.junit.Assert.*;
import brs.at.AT_Error;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AT_Error_ESTest extends AT_Error_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AT_Error[] aT_ErrorArray0 = AT_Error.values();
      assertNotNull(aT_ErrorArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AT_Error aT_Error0 = AT_Error.valueOf("INCORRECT_CODE_LENGTH");
      assertEquals(6, aT_Error0.getCode());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AT_Error aT_Error0 = AT_Error.INCORRECT_CALL_PAGES;
      String string0 = aT_Error0.getDescription();
      assertEquals("Maximum number of call stack pages exceeded.", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AT_Error aT_Error0 = AT_Error.INCORRECT_CALL_PAGES;
      String string0 = aT_Error0.toString();
      assertEquals("error code: 4 , description : Maximum number of call stack pages exceeded.", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AT_Error aT_Error0 = AT_Error.INCORRECT_VERSION;
      int int0 = aT_Error0.getCode();
      assertEquals(1, int0);
  }
}
