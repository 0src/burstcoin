/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 21 20:53:48 GMT 2017
 */

package brs.at;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import brs.at.AT_Machine_State;
import brs.at.AT_Transaction;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.util.Collection;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AT_Machine_State_ESTest extends AT_Machine_State_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.getState();
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray1 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray1);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.new Machine_State();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray1);
      aT_Machine_State_Machine_State0.finished = true;
      aT_Machine_State0.get_B3();
      aT_Machine_State0.getId();
      aT_Machine_State_Machine_State0.isRunning();
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.getMachineState();
      aT_Machine_State0.getVersion();
      aT_Machine_State0.getC_call_stack_bytes();
      // Undeclared exception!
      try { 
        aT_Machine_State0.getBytes();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.getState();
      aT_Machine_State0.setDsize((byte)60);
      byte[] byteArray1 = aT_Machine_State0.getBytes();
      aT_Machine_State0.set_B1(byteArray1);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray0);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray1);
      aT_Machine_State0.get_B3();
      aT_Machine_State_Machine_State0.isRunning();
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.get_A3();
      aT_Machine_State0.set_A1(byteArray0);
      aT_Machine_State0.getCreationBlockHeight();
      aT_Machine_State0.getAp_data();
      int int0 = aT_Machine_State_Machine_State0.pcs;
      aT_Machine_State0.getCsize();
      aT_Machine_State_Machine_State0.isDead();
      byte[] byteArray2 = aT_Machine_State0.get_B1();
      aT_Machine_State0.setState(byteArray2);
      aT_Machine_State0.get_A4();
      aT_Machine_State0.getMachineState();
      aT_Machine_State0.getTransactions();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[6] = (byte)68;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)68);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount((byte)68);
      aT_Machine_State0.setDsize((-641));
      aT_Machine_State0.setDsize((byte)68);
      aT_Machine_State0.set_B1(byteArray0);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      aT_Machine_State_Machine_State0.steps = (int) (byte)68;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.reset();
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State_Machine_State0.pc = (int) (byte)68;
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray0);
      aT_Machine_State0.setHeight((byte)68);
      aT_Machine_State0.getP_balance();
      // Undeclared exception!
      try { 
        aT_Machine_State0.setState(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[6] = (byte)60;
      AT_Transaction aT_Transaction0 = mock(AT_Transaction.class, new ViolatedAssumptionAnswer());
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State((byte[]) null, (byte[]) null, byteArray0, 3);
      aT_Machine_State0.getP_balance();
      // Undeclared exception!
      try { 
        aT_Machine_State0.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.at.AT_Machine_State", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[6] = (byte) (-39);
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setC_user_stack_bytes(15);
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-631));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_data();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State0.setMinActivationAmount((-1026L));
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State_Machine_State0.flags = byteArray2;
      AT_Transaction aT_Transaction0 = mock(AT_Transaction.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(aT_Transaction0).getRecipientId();
      aT_Machine_State0.addTransaction(aT_Transaction0);
      aT_Machine_State0.set_A4(byteArray0);
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State_Machine_State0.reset();
      aT_Machine_State0.get_B2();
      aT_Machine_State0.get_A2();
      aT_Machine_State0.getAp_data();
      aT_Machine_State0.get_A4();
      aT_Machine_State_Machine_State0.isFinished();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.getState();
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray1 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray1);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.new Machine_State();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State_Machine_State0.dead = true;
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray1);
      aT_Machine_State0.get_B3();
      aT_Machine_State0.getId();
      aT_Machine_State_Machine_State0.isRunning();
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.getMachineState();
      aT_Machine_State0.getVersion();
      aT_Machine_State0.getC_call_stack_bytes();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.getState();
      aT_Machine_State0.setDsize((byte)60);
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.get_B3();
      aT_Machine_State_Machine_State0.isRunning();
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.get_A3();
      aT_Machine_State0.set_A1(byteArray0);
      aT_Machine_State0.getCreationBlockHeight();
      aT_Machine_State0.getAp_data();
      int int0 = aT_Machine_State_Machine_State0.pcs;
      aT_Machine_State0.getCsize();
      aT_Machine_State_Machine_State0.isDead();
      byte[] byteArray3 = aT_Machine_State0.get_B1();
      // Undeclared exception!
      try { 
        aT_Machine_State0.setState(byteArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[6] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-631));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_data();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.set_A2(byteArray2);
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      Long long0 = new Long((-3111L));
      AT_Transaction aT_Transaction0 = mock(AT_Transaction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) byteArray2).when(aT_Transaction0).getRecipientId();
      aT_Machine_State0.addTransaction(aT_Transaction0);
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.get_B2();
      aT_Machine_State0.get_A2();
      aT_Machine_State0.getAp_data();
      aT_Machine_State0.get_A4();
      aT_Machine_State_Machine_State0.isFinished();
      aT_Machine_State0.getP_balance();
      // Undeclared exception!
      try { 
        aT_Machine_State0.getTransactionBytes();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes(1);
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A1(byteArray1);
      aT_Machine_State0.set_A4(byteArray2);
      Long long0 = aT_Machine_State0.getG_balance();
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.get_A2();
      aT_Machine_State0.getC_user_stack_bytes();
      aT_Machine_State0.getG_balance();
      aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.getId();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.getState();
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray1 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray1);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.new Machine_State();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State_Machine_State0.cs = 0;
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray1);
      aT_Machine_State0.get_B3();
      aT_Machine_State0.getId();
      aT_Machine_State_Machine_State0.isRunning();
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.getMachineState();
      aT_Machine_State0.getVersion();
      aT_Machine_State0.getC_call_stack_bytes();
      aT_Machine_State0.getC_call_stack_bytes();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[6] = (byte)68;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)68);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount((byte)68);
      aT_Machine_State0.setDsize((-641));
      aT_Machine_State0.setDsize((byte)68);
      aT_Machine_State0.getState();
      aT_Machine_State0.set_B1(byteArray0);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.reset();
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State_Machine_State0.pc = (int) (byte)68;
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray0);
      aT_Machine_State0.setHeight((byte)68);
      aT_Machine_State0.getP_balance();
      aT_Machine_State_Machine_State0.reset();
      // Undeclared exception!
      try { 
        aT_Machine_State0.setState(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes(1);
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.getG_balance();
      Long long0 = new Long(0L);
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State_Machine_State0.isFinished();
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.getG_balance();
      aT_Machine_State0.get_A4();
      aT_Machine_State0.getDsize();
      aT_Machine_State0.get_B4();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte) (-39);
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte) (-39));
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes(1);
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.getG_balance();
      Long long0 = new Long(0L);
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State_Machine_State0.isFinished();
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.getC_user_stack_bytes();
      aT_Machine_State0.getHeight();
      aT_Machine_State_Machine_State0.isDead();
      aT_Machine_State0.getMachineState();
      aT_Machine_State0.getId();
      aT_Machine_State0.getCsize();
      aT_Machine_State0.getDsize();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      byteArray0[15] = (byte)68;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)68);
      aT_Machine_State0.setCsize(512);
      byte[] byteArray1 = aT_Machine_State0.getState();
      aT_Machine_State0.setState(byteArray1);
      aT_Machine_State0.getMachineState();
      aT_Machine_State0.get_A1();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[18] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.setC_user_stack_bytes((byte) (-39));
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((byte)60);
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes((-29));
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      Long long0 = aT_Machine_State0.getG_balance();
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.get_A2();
      aT_Machine_State_Machine_State0.opc = (int) (byte)60;
      aT_Machine_State0.getC_user_stack_bytes();
      aT_Machine_State0.getG_balance();
      // Undeclared exception!
      try { 
        aT_Machine_State_Machine_State0.getMachineStateBytes();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte) (-13);
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((byte) (-13));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes((-29));
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      Long long0 = aT_Machine_State0.getG_balance();
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.get_A2();
      int int0 = aT_Machine_State_Machine_State0.err;
      aT_Machine_State_Machine_State0.pcs = (-1);
      aT_Machine_State0.getG_balance();
      // Undeclared exception!
      try { 
        aT_Machine_State_Machine_State0.getMachineStateBytes();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[6] = (byte)68;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)68);
      aT_Machine_State0.freezeOnSameBalance();
      aT_Machine_State0.setFreeze(false);
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount((byte)68);
      aT_Machine_State0.setDsize((-641));
      aT_Machine_State0.setDsize((byte)68);
      aT_Machine_State0.set_B1(byteArray0);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.reset();
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State_Machine_State0.pc = (int) (byte)68;
      // Undeclared exception!
      try { 
        aT_Machine_State0.getState();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes(1);
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.getG_balance();
      aT_Machine_State0.setC_user_stack_bytes(454);
      Long long0 = new Long(0L);
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State_Machine_State0.isFinished();
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.get_A2();
      aT_Machine_State0.getC_user_stack_bytes();
      aT_Machine_State0.getG_balance();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[6] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-631));
      aT_Machine_State0.setDsize((byte)60);
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_data();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      AT_Transaction aT_Transaction0 = mock(AT_Transaction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) null).when(aT_Transaction0).getRecipientId();
      aT_Machine_State0.addTransaction(aT_Transaction0);
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.get_B2();
      aT_Machine_State0.get_A2();
      // Undeclared exception!
      try { 
        aT_Machine_State0.getTransactionBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[6] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-631));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_data();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      AT_Transaction aT_Transaction0 = mock(AT_Transaction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) null).when(aT_Transaction0).getRecipientId();
      aT_Machine_State0.addTransaction(aT_Transaction0);
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.get_B2();
      aT_Machine_State0.get_A2();
      // Undeclared exception!
      try { 
        aT_Machine_State0.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes(1);
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State_Machine_State0.cs = (-641);
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.getG_balance();
      Long long0 = new Long(0L);
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State_Machine_State0.isFinished();
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.getP_balance();
      aT_Machine_State0.getWaitForNumberOfBlocks();
      aT_Machine_State_Machine_State0.reset();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[25] = (byte) (-39);
      byteArray0[6] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      aT_Machine_State0.setFreeze(true);
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      // Undeclared exception!
      try { 
        aT_Machine_State0.setG_balance((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.at.AT_Machine_State", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[11] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = null;
      try {
        aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.getState();
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.setMinActivationAmount(0L);
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.get_B3();
      aT_Machine_State0.getId();
      aT_Machine_State_Machine_State0.isRunning();
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.get_A3();
      aT_Machine_State0.getCreationBlockHeight();
      aT_Machine_State0.getAp_data();
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.getStateSize();
      aT_Machine_State0.getDsize();
      AT_Transaction aT_Transaction0 = mock(AT_Transaction.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(aT_Transaction0).getRecipientId();
      // Undeclared exception!
      try { 
        aT_Machine_State0.addTransaction(aT_Transaction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[6] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-631));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.set_B1(byteArray1);
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_data();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      AT_Transaction aT_Transaction0 = mock(AT_Transaction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray2, (Object) null).when(aT_Transaction0).getRecipientId();
      aT_Machine_State0.addTransaction(aT_Transaction0);
      aT_Machine_State0.get_A2();
      // Undeclared exception!
      try { 
        aT_Machine_State0.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[6] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-631));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_data();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      aT_Machine_State_Machine_State0.running = true;
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.us = (int) (byte) (-39);
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State_Machine_State0.reset();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.getState();
      // Undeclared exception!
      try { 
        aT_Machine_State0.setP_balance((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.at.AT_Machine_State", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[6] = (byte)68;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)68);
      aT_Machine_State0.getState();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.new Machine_State();
      aT_Machine_State_Machine_State0.getMachineStateBytes();
      aT_Machine_State0.getSleepBetween();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      Long long0 = new Long((byte)60);
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes(1);
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.setFreeze(false);
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.getG_balance();
      Long long1 = new Long(0L);
      aT_Machine_State0.setG_balance(long1);
      aT_Machine_State_Machine_State0.isFinished();
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.getTransactions();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[6] = (byte)68;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)68);
      aT_Machine_State0.setCsize(512);
      byte[] byteArray1 = aT_Machine_State0.getState();
      aT_Machine_State0.setState(byteArray1);
      aT_Machine_State0.get_B2();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, (byte[]) null, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      // Undeclared exception!
      try { 
        aT_Machine_State0.getTransactionBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.at.AT_Machine_State", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes(1);
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.getG_balance();
      Long long0 = new Long(0L);
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State_Machine_State0.isFinished();
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.get_A2();
      aT_Machine_State0.getC_user_stack_bytes();
      aT_Machine_State0.getAp_data();
      aT_Machine_State0.getCsize();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)67;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-658));
      aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)67);
      // Undeclared exception!
      try { 
        aT_Machine_State0.set_B1((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.at.AT_Machine_State", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      Long long0 = new Long((-641));
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      aT_Machine_State0.getMachineState();
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.get_B3();
      aT_Machine_State0.get_A4();
      aT_Machine_State0.getG_balance();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes(1);
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State_Machine_State0.err = 4;
      aT_Machine_State0.getG_balance();
      Long long0 = new Long(0L);
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State_Machine_State0.isFinished();
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State_Machine_State0.opc = (int) (byte) (-39);
      aT_Machine_State0.get_B2();
      aT_Machine_State_Machine_State0.isStopped();
      aT_Machine_State_Machine_State0.reset();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray0);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes(1);
      aT_Machine_State0.getAp_code();
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.set_A4(byteArray0);
      aT_Machine_State0.getG_balance();
      aT_Machine_State0.getStateSize();
      Long long0 = new Long(0L);
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.get_A2();
      aT_Machine_State0.getC_user_stack_bytes();
      aT_Machine_State0.getHeight();
      aT_Machine_State0.getCreationBlockHeight();
      aT_Machine_State0.get_B3();
      aT_Machine_State0.getAp_data();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[1] = (byte)93;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, (byte[]) null, byteArray0, (byte)93);
      // Undeclared exception!
      try { 
        aT_Machine_State0.set_A4((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.at.AT_Machine_State", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      aT_Machine_State_Machine_State0.cs = 1749;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.getHeight();
      aT_Machine_State0.getCsize();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((byte) (-39));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.set_A2(byteArray2);
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.get_B3();
      aT_Machine_State0.getSleepBetween();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes(1);
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.getG_balance();
      Long long0 = new Long(0L);
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State_Machine_State0.isFinished();
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.getC_call_stack_bytes();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[6] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State_Machine_State0.steps = 8;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      // Undeclared exception!
      try { 
        aT_Machine_State0.getBytes();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 34);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(34);
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.get_B1();
      aT_Machine_State_Machine_State0.getSize();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.getStateSize();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize(15);
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.running = false;
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.get_B3();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[29];
      byteArray0[0] = (byte) (-39);
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)0);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.getCreationBlockHeight();
      aT_Machine_State0.set_A3(byteArray1);
      aT_Machine_State0.setMinActivationAmount((byte)60);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      // Undeclared exception!
      try { 
        aT_Machine_State0.setState(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[6] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      aT_Machine_State0.set_A3(byteArray0);
      aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-632));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-641));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State_Machine_State0.pc = 15;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      // Undeclared exception!
      try { 
        aT_Machine_State0.setState(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[6] = (byte)68;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)68);
      aT_Machine_State0.set_B3(byteArray0);
      aT_Machine_State0.setCsize(37);
      // Undeclared exception!
      try { 
        aT_Machine_State0.getState();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[6] = (byte)68;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)68);
      aT_Machine_State0.setCsize((-641));
      // Undeclared exception!
      try { 
        aT_Machine_State0.setState(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)101;
      AT_Machine_State aT_Machine_State0 = null;
      try {
        aT_Machine_State0 = new AT_Machine_State(byteArray0, (byte[]) null, (byte)101, (byte[]) null, 1677, (-725), 1946, 717, 1946, (byte)102, true, 1361L, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.at.AT_Machine_State", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      AT_Machine_State aT_Machine_State0 = null;
      try {
        aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (-1300));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.at.AT_Constants", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)53;
      AT_Machine_State aT_Machine_State0 = null;
      try {
        aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)53);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      byteArray0[15] = (byte)68;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)68);
      aT_Machine_State0.setCsize(512);
      byte[] byteArray1 = aT_Machine_State0.getState();
      aT_Machine_State0.setState(byteArray1);
      aT_Machine_State0.getWaitForNumberOfBlocks();
      aT_Machine_State0.getTransactions();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[6] = (byte) (-39);
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setC_user_stack_bytes(15);
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((-631));
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.setDsize((byte)60);
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_data();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State_Machine_State0.flags = byteArray2;
      AT_Transaction aT_Transaction0 = mock(AT_Transaction.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(aT_Transaction0).getRecipientId();
      aT_Machine_State0.addTransaction(aT_Transaction0);
      aT_Machine_State0.set_A4(byteArray0);
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.get_B2();
      aT_Machine_State0.get_A2();
      aT_Machine_State0.getAp_data();
      aT_Machine_State0.get_A4();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State_Machine_State0.isFinished();
      aT_Machine_State0.getCreator();
      aT_Machine_State0.get_A4();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.setDsize((byte)60);
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.setC_call_stack_bytes((-29));
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      Long long0 = aT_Machine_State0.getG_balance();
      aT_Machine_State0.setG_balance(long0);
      aT_Machine_State0.set_B3(byteArray1);
      aT_Machine_State0.get_A1();
      aT_Machine_State0.get_A2();
      aT_Machine_State0.getC_user_stack_bytes();
      aT_Machine_State0.getG_balance();
      // Undeclared exception!
      try { 
        aT_Machine_State_Machine_State0.getMachineStateBytes();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[4] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotNull(aT_Machine_State0);
      
      boolean boolean0 = aT_Machine_State0.freezeOnSameBalance();
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertFalse(boolean0);
      
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      aT_Machine_State0.setMinActivationAmount(15);
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      aT_Machine_State0.setDsize((-641));
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals((-641), aT_Machine_State0.getDsize());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals((-641), aT_Machine_State0.getDsize());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      aT_Machine_State0.setDsize((byte)60);
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      aT_Machine_State0.set_B1(byteArray2);
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int0 = aT_Machine_State0.getSleepBetween();
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(0, int0);
      
      aT_Machine_State0.clearTransactions();
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      aT_Machine_State0.setC_call_stack_bytes(1);
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      ByteBuffer byteBuffer0 = aT_Machine_State0.getAp_code();
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(55552, byteBuffer0.remaining());
      assertEquals(55552, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=55552 cap=55552]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(55552, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotNull(byteBuffer0);
      
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotNull(aT_Machine_State_Machine_State0);
      
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      assertNotNull(treeSet0);
      
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      
      aT_Machine_State0.set_B2(byteArray1);
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      long long0 = aT_Machine_State_Machine_State0.getSteps();
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(0L, long0);
      
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      aT_Machine_State0.set_A4(byteArray2);
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Long long1 = aT_Machine_State0.getG_balance();
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long(0L);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      
      aT_Machine_State0.setG_balance(long2);
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      boolean boolean1 = aT_Machine_State_Machine_State0.isFinished();
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      aT_Machine_State0.set_B3(byteArray1);
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray3 = aT_Machine_State_Machine_State0.flags;
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray3);
      assertNotNull(byteArray3);
      
      Collection<AT_Transaction> collection0 = aT_Machine_State0.getTransactions();
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertNotNull(collection0);
      
      Long long3 = aT_Machine_State0.getG_balance();
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertEquals(0L, (long)long3);
      assertNotNull(long3);
      
      byte[] byteArray4 = aT_Machine_State0.get_A4();
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotNull(byteArray4);
      
      int int1 = aT_Machine_State0.getDsize();
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(int1 == int0);
      assertEquals(60, int1);
      
      byte[] byteArray5 = aT_Machine_State0.get_B4();
      assertEquals(1, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)15360, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(55552, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray5);
      assertNotNull(byteArray5);
      
      // Undeclared exception!
      try { 
        aT_Machine_State0.addTransaction((AT_Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("brs.at.AT_Machine_State", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 37);
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotNull(aT_Machine_State0);
      
      boolean boolean0 = aT_Machine_State0.freezeOnSameBalance();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(boolean0);
      
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      aT_Machine_State0.setWaitForNumberOfBlocks((byte) (-39));
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      aT_Machine_State0.setMinActivationAmount(37);
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Long long0 = new Long(37);
      assertEquals(37L, (long)long0);
      assertNotNull(long0);
      
      aT_Machine_State0.setP_balance(long0);
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = aT_Machine_State0.getState();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      aT_Machine_State0.setDsize((-641));
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals((-641), aT_Machine_State0.getDsize());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray3 = aT_Machine_State0.getBytes();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals((-641), aT_Machine_State0.getDsize());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      
      aT_Machine_State0.setDsize((byte)60);
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      aT_Machine_State0.set_B1(byteArray3);
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      int int0 = aT_Machine_State0.getSleepBetween();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, int0);
      
      aT_Machine_State0.clearTransactions();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ByteBuffer byteBuffer0 = aT_Machine_State0.getAp_code();
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteBuffer0);
      
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(aT_Machine_State_Machine_State0);
      
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      assertNotNull(treeSet0);
      
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      
      long long1 = aT_Machine_State_Machine_State0.getSteps();
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0L, long1);
      
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      aT_Machine_State0.set_A4(byteArray3);
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = aT_Machine_State0.get_B3();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray4);
      assertNotNull(byteArray4);
      
      byte[] byteArray5 = aT_Machine_State0.getId();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray3);
      assertSame(byteArray5, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertNotNull(byteArray5);
      
      boolean boolean1 = aT_Machine_State_Machine_State0.isRunning();
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Long long2 = new Long((-641));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-641L), (long)long2);
      assertNotNull(long2);
      
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State1 = aT_Machine_State0.getMachineState();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertEquals(0L, aT_Machine_State_Machine_State1.getSteps());
      assertFalse(aT_Machine_State_Machine_State1.isFinished());
      assertFalse(aT_Machine_State_Machine_State1.isDead());
      assertFalse(aT_Machine_State_Machine_State1.isRunning());
      assertTrue(aT_Machine_State_Machine_State1.isStopped());
      assertEquals(86, aT_Machine_State_Machine_State1.getSize());
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertSame(aT_Machine_State_Machine_State1, aT_Machine_State_Machine_State0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertNotNull(aT_Machine_State_Machine_State1);
      
      short short0 = aT_Machine_State0.getVersion();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertEquals((short)217, short0);
      
      int int1 = aT_Machine_State0.getC_call_stack_bytes();
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = aT_Machine_State_Machine_State0.isFinished();
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-39), aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(37L, (long)aT_Machine_State0.getP_balance());
      assertEquals(37, aT_Machine_State0.getHeight());
      assertEquals(37L, aT_Machine_State0.minActivationAmount());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(37, aT_Machine_State0.getCreationBlockHeight());
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertSame(aT_Machine_State_Machine_State0, aT_Machine_State_Machine_State1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotNull(aT_Machine_State0);
      
      boolean boolean0 = aT_Machine_State0.freezeOnSameBalance();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertFalse(boolean0);
      
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0L, aT_Machine_State0.minActivationAmount());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      aT_Machine_State0.setMinActivationAmount(15);
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = aT_Machine_State0.getState();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0, aT_Machine_State0.getDsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      aT_Machine_State0.setDsize((-641));
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-641), aT_Machine_State0.getDsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray3 = aT_Machine_State0.getBytes();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals((-641), aT_Machine_State0.getDsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      
      aT_Machine_State0.setDsize((byte)60);
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      aT_Machine_State0.set_B1(byteArray3);
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      int int0 = aT_Machine_State0.getSleepBetween();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, int0);
      
      aT_Machine_State0.clearTransactions();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ByteBuffer byteBuffer0 = aT_Machine_State0.getAp_code();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteBuffer0);
      
      aT_Machine_State0.set_A4(byteArray3);
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = aT_Machine_State0.get_B3();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray4);
      assertNotNull(byteArray4);
      
      byte[] byteArray5 = aT_Machine_State0.getId();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray5);
      
      long long0 = aT_Machine_State0.minActivationAmount();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(15L, long0);
      
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.new Machine_State();
      assertFalse(aT_Machine_State_Machine_State0.isFinished());
      assertFalse(aT_Machine_State_Machine_State0.isDead());
      assertEquals(0L, aT_Machine_State_Machine_State0.getSteps());
      assertFalse(aT_Machine_State_Machine_State0.isRunning());
      assertTrue(aT_Machine_State_Machine_State0.isStopped());
      assertEquals(86, aT_Machine_State_Machine_State0.getSize());
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(aT_Machine_State_Machine_State0);
      
      short short0 = aT_Machine_State0.getVersion();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((short)217, short0);
      
      int int1 = aT_Machine_State0.getC_call_stack_bytes();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = aT_Machine_State0.getC_call_stack_bytes();
      assertEquals(15, aT_Machine_State0.getCreationBlockHeight());
      assertFalse(aT_Machine_State0.freezeOnSameBalance());
      assertEquals(0L, (long)aT_Machine_State0.getG_balance());
      assertEquals(0, aT_Machine_State0.getWaitForNumberOfBlocks());
      assertEquals(0, aT_Machine_State0.getC_call_stack_bytes());
      assertEquals(0, aT_Machine_State0.getCsize());
      assertEquals(0L, (long)aT_Machine_State0.getP_balance());
      assertEquals((short)217, aT_Machine_State0.getVersion());
      assertEquals(0, aT_Machine_State0.getC_user_stack_bytes());
      assertEquals(60, aT_Machine_State0.getDsize());
      assertEquals(15, aT_Machine_State0.getHeight());
      assertEquals(0, aT_Machine_State0.getSleepBetween());
      assertEquals(15L, aT_Machine_State0.minActivationAmount());
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, 15);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount(15);
      aT_Machine_State0.getState();
      aT_Machine_State0.setDsize((byte)60);
      byte[] byteArray2 = aT_Machine_State0.getBytes();
      aT_Machine_State0.set_B1(byteArray2);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.clearTransactions();
      aT_Machine_State0.getAp_code();
      AT_Machine_State.Machine_State aT_Machine_State_Machine_State0 = aT_Machine_State0.getMachineState();
      TreeSet<Integer> treeSet0 = aT_Machine_State_Machine_State0.jumps;
      aT_Machine_State_Machine_State0.jumps = treeSet0;
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State_Machine_State0.getSteps();
      aT_Machine_State0.setMachineState(aT_Machine_State_Machine_State0);
      aT_Machine_State0.set_A4(byteArray2);
      aT_Machine_State0.get_B3();
      byte[] byteArray3 = aT_Machine_State0.getId();
      aT_Machine_State_Machine_State0.isRunning();
      aT_Machine_State_Machine_State0.steps = 0;
      aT_Machine_State0.minActivationAmount();
      aT_Machine_State0.get_A3();
      aT_Machine_State0.set_B4(byteArray3);
      aT_Machine_State0.set_A1(byteArray0);
      aT_Machine_State0.getCreationBlockHeight();
      aT_Machine_State0.getAp_data();
      int int0 = aT_Machine_State_Machine_State0.pcs;
      aT_Machine_State0.getCsize();
      aT_Machine_State_Machine_State0.isDead();
      byte[] byteArray4 = aT_Machine_State0.get_B1();
      // Undeclared exception!
      try { 
        aT_Machine_State0.setState(byteArray4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byte byte0 = (byte)68;
      byteArray0[6] = (byte)68;
      AT_Machine_State aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, byteArray0, (byte)68);
      aT_Machine_State0.setWaitForNumberOfBlocks(2149);
      aT_Machine_State0.freezeOnSameBalance();
      byte[] byteArray1 = aT_Machine_State0.getTransactionBytes();
      aT_Machine_State0.setMinActivationAmount((byte)68);
      aT_Machine_State0.setDsize((-641));
      aT_Machine_State0.setDsize((byte)68);
      aT_Machine_State0.set_B1(byteArray0);
      aT_Machine_State0.getSleepBetween();
      aT_Machine_State0.getAp_code();
      aT_Machine_State0.set_B2(byteArray1);
      aT_Machine_State0.getTransactions();
      aT_Machine_State0.set_A4(byteArray0);
      aT_Machine_State0.setHeight((byte)68);
      aT_Machine_State0.getP_balance();
      // Undeclared exception!
      try { 
        aT_Machine_State0.getBytes();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      AT_Machine_State aT_Machine_State0 = null;
      try {
        aT_Machine_State0 = new AT_Machine_State(byteArray0, byteArray0, (byte)0, byteArray0, 1221, 23, (byte)0, (byte)8, (byte)8, (byte)0, false, (byte)0, byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }
}
